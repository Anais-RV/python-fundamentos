"""
Calculadora v5 - Historial de operaciones
==========================================

En esta quinta versi√≥n a√±adir√°s un historial que guarda todas las operaciones
realizadas durante la sesi√≥n usando listas y diccionarios.

Conceptos aplicados:
- Listas para almacenar m√∫ltiples elementos
- Diccionarios para estructurar datos
- append() para a√±adir a listas
- enumerate() para iterar con √≠ndice
- Verificaci√≥n de listas vac√≠as

Instrucciones:
1. Crea una lista para almacenar operaciones
2. Crea funci√≥n para guardar operaciones en el historial
3. Crea funci√≥n para mostrar el historial
4. A√±ade opci√≥n "Ver historial" al men√∫
"""

# ===== FUNCIONES DE OPERACIONES (copiadas de v4) =====

def sumar(a, b):
    """Suma dos n√∫meros."""
    return a + b


def restar(a, b):
    """Resta dos n√∫meros."""
    return a - b


def multiplicar(a, b):
    """Multiplica dos n√∫meros."""
    return a * b


def dividir(a, b):
    """Divide dos n√∫meros."""
    return a / b


# ===== FUNCIONES DE INTERFAZ =====

def mostrar_menu():
    """Muestra el men√∫ de opciones de la calculadora."""
    print("\n=== CALCULADORA ===")
    print("1. Sumar")
    print("2. Restar")
    print("3. Multiplicar")
    print("4. Dividir")
    print("5. Ver historial")  # Nueva opci√≥n
    print("6. Salir")  # Ahora es la opci√≥n 6


def obtener_numeros():
    """Pide dos n√∫meros al usuario y los devuelve."""
    num1 = float(input("Primer n√∫mero: "))
    num2 = float(input("Segundo n√∫mero: "))
    return num1, num2


# ===== NUEVAS FUNCIONES PARA HISTORIAL =====

# TODO 1: Crea una lista global para almacenar el historial
# (Nota: en programaci√≥n avanzada evitamos globales, pero aqu√≠ es did√°ctico)
# historial = []
historial = []

def guardar_operacion(num1, num2, operacion, resultado):
    """Guarda una operaci√≥n en el historial.

    Args:
        num1: Primer n√∫mero
        num2: Segundo n√∫mero
        operacion: S√≠mbolo de la operaci√≥n (+, -, *, /)
        resultado: Resultado de la operaci√≥n
    """
      
    # TODO 2: Crea un diccionario con los datos de la operaci√≥n
    # operacion_dict = {
    #     "num1": num1,
    #     "num2": num2,
    #     "operacion": operacion,
    #     "resultado": resultado
    # }
    

    # TODO 3: A√±ade el diccionario a la lista historial
    # historial.append(operacion_dict)

    pass
    operacion_dict = {
        "num1": num1,
        "num2": num2,
        "operacion": operacion,
        "resultado": resultado
    }
    historial.append(operacion_dict)



def mostrar_historial():
    """Muestra todas las operaciones del historial."""
    # TODO 4: Verifica si el historial est√° vac√≠o
    # if not historial:
    #     print("üì≠ No hay operaciones en el historial")
    #     return

    # TODO 5: Muestra el t√≠tulo
    # print("\nüìú HISTORIAL DE OPERACIONES:")

    # TODO 6: Itera sobre el historial con enumerate()
    # enumerate() nos da el √≠ndice (i) y el elemento (op)
    # El segundo par√°metro (1) indica que empiece a contar desde 1
    # for i, op in enumerate(historial, 1):
    #     print(f"{i}. {op['num1']} {op['operacion']} {op['num2']} = {op['resultado']:.2f}")

    pass
    if not historial:
        print("No hay operaciones en el historial")
        return
    print("\nHistorial de operaciones")
    for i, op in enumerate(historial, 1):
            print(f"{i}. {op['num1']} {op['operacion']} {op['num2']} = {op['resultado']:.2f}")

# ===== FUNCI√ìN PRINCIPAL =====

def main():
    """Funci√≥n principal de la calculadora."""

    # while True:
        # mostrar_menu()
        # opcion = input("\nElige una opci√≥n: ")

        # TODO 7: Actualiza la condici√≥n de salir (ahora es la opci√≥n 6)
        # if opcion == "6":
        #     print("¬°Hasta pronto! üëã")
        #     break

        # TODO 8: A√±ade la nueva opci√≥n 5 para ver el historial
        # if opcion == "5":
        #     mostrar_historial()
        #     continue  # Vuelve al men√∫ sin pedir n√∫meros

        # TODO 9: Actualiza la validaci√≥n (ahora hay 5 opciones v√°lidas)
        # if opcion not in ["1", "2", "3", "4", "5"]:
        #     print("‚ùå Opci√≥n no v√°lida")
        #     continue

        # num1, num2 = obtener_numeros()

        # if opcion == "4" and num2 == 0:
        #     print("‚ùå No se puede dividir por cero")
        #     continue

        # TODO 10: Realiza la operaci√≥n y guarda en el historial
        # if opcion == "1":
        #     resultado = sumar(num1, num2)
        #     simbolo = "+"
        # elif opcion == "2":
        #     resultado = restar(num1, num2)
        #     simbolo = "-"
        # elif opcion == "3":
        #     resultado = multiplicar(num1, num2)
        #     simbolo = "*"
        # elif opcion == "4":
        #     resultado = dividir(num1, num2)
        #     simbolo = "/"

        # print(f"‚úÖ {num1} {simbolo} {num2} = {resultado:.2f}")

        # TODO 11: Guarda la operaci√≥n en el historial
        # guardar_operacion(num1, num2, simbolo, resultado)

    pass
    while True:
        mostrar_menu()
        opcion = input("\nElige una opci√≥n: ")
        if opcion == "6":
            print("¬°See you soon!")
            break
        if opcion == "5":
            mostrar_historial()
            continue
        if opcion not in ["1", "2", "3", "4"]:
            print("Opci√≥n no v√°lida")
            continue
        
        num1, num2 = obtener_numeros()
        
        if opcion == "4" and num2 == 0:
            print("No se puede dividir entre cero...")
            
        if opcion == "1":
            resultado = sumar(num1, num2)
            simbolo = "+"
        elif opcion == "2":
            resultado = restar(num1, num2)
            simbolo = "-"
        elif opcion == "3":
            resultado = multiplicar(num1, num2)
            simbolo = "*"
        elif opcion == "4":
            resultado = dividir(num1, num2)
            simbolo = "/"
            
        print(f"{num1} {simbolo} {num2} ? {resultado:.2f}")

if __name__ == "__main__":
    main()


# ¬°Fant√°stico! Ahora tu calculadora tiene memoria.
#
# Prueba estos casos:
# 1. Realiza varias operaciones (5 + 3, 10 - 4, 7 * 2, 15 / 3)
# 2. Elige "Ver historial" ‚Üí debe mostrar todas las operaciones
# 3. Realiza m√°s operaciones y vuelve a ver el historial ‚Üí deben aparecer
# 4. Sal del programa y vuelve a ejecutarlo ‚Üí el historial se habr√° borrado
#    (es normal, en v6 lo guardaremos en un archivo para que persista)
#
# Ventajas de esta versi√≥n:
# ‚úÖ Guarda todas las operaciones de la sesi√≥n
# ‚úÖ Puedes revisar qu√© has calculado
# ‚úÖ Usa estructuras de datos complejas (lista de diccionarios)
# ‚úÖ Es f√°cil a√±adir m√°s funcionalidades (ej: buscar, borrar operaciones)
#
# üí° En la v6 guardar√°s el historial en un archivo JSON para que persista
