"""
Calculadora v4 - C√≥digo modular con funciones
==============================================

En esta cuarta versi√≥n refactorizar√°s todo el c√≥digo en funciones reutilizables.
Ver√°s c√≥mo el c√≥digo se vuelve m√°s limpio, mantenible y profesional.

Conceptos aplicados:
- Definici√≥n de funciones con def
- Par√°metros y return
- Docstrings para documentaci√≥n
- Separaci√≥n de responsabilidades
- Patr√≥n if __name__ == "__main__"

Instrucciones:
1. Crea funciones para cada operaci√≥n matem√°tica
2. Crea funci√≥n para mostrar el men√∫
3. Crea funci√≥n para obtener n√∫meros del usuario
4. Organiza todo en una funci√≥n main()
"""

# TODO 1: Define las funciones para cada operaci√≥n matem√°tica
# Cada funci√≥n debe recibir dos par√°metros (a, b) y devolver el resultado

def sumar(a, b):
    """Suma dos n√∫meros.
    
    Args:
        a: Primer n√∫mero
        b: Segundo n√∫mero
    
    Returns:
        La suma de a y b
    """
    # return a + b
    pass  # Borra esto y escribe el return


def restar(a, b):
    """Resta dos n√∫meros."""
    # TODO: Implementa la resta
    pass


def multiplicar(a, b):
    """Multiplica dos n√∫meros."""
    # TODO: Implementa la multiplicaci√≥n
    pass


def dividir(a, b):
    """Divide dos n√∫meros.
    
    Args:
        a: Dividendo
        b: Divisor
    
    Returns:
        El resultado de a / b
    """
    # TODO: Implementa la divisi√≥n
    pass


# TODO 2: Crea una funci√≥n para mostrar el men√∫
def mostrar_menu():
    """Muestra el men√∫ de opciones de la calculadora."""
    # print("\n=== CALCULADORA ===")
    # print("1. Sumar")
    # print("2. Restar")
    # print("3. Multiplicar")
    # print("4. Dividir")
    # print("5. Salir")
    pass


# TODO 3: Crea una funci√≥n para obtener dos n√∫meros del usuario
def obtener_numeros():
    """Pide dos n√∫meros al usuario y los devuelve.
    
    Returns:
        Una tupla con los dos n√∫meros (num1, num2)
    """
    # num1 = float(input("Primer n√∫mero: "))
    # num2 = float(input("Segundo n√∫mero: "))
    # return num1, num2
    pass


# TODO 4: Crea la funci√≥n principal que contiene el bucle del programa
def main():
    """Funci√≥n principal de la calculadora."""
    
    # while True:
        # TODO 4.1: Muestra el men√∫ llamando a la funci√≥n mostrar_menu()
        # mostrar_menu()
        
        # TODO 4.2: Pide la opci√≥n al usuario
        # opcion = input("\nElige una opci√≥n: ")
        
        # TODO 4.3: Si elige salir, termina
        # if opcion == "5":
        #     print("¬°Hasta pronto! üëã")
        #     break
        
        # TODO 4.4: Valida que la opci√≥n sea v√°lida
        # if opcion not in ["1", "2", "3", "4"]:
        #     print("‚ùå Opci√≥n no v√°lida")
        #     continue
        
        # TODO 4.5: Obt√©n los n√∫meros llamando a la funci√≥n obtener_numeros()
        # num1, num2 = obtener_numeros()
        
        # TODO 4.6: Controla divisi√≥n por cero
        # if opcion == "4" and num2 == 0:
        #     print("‚ùå No se puede dividir por cero")
        #     continue
        
        # TODO 4.7: Llama a la funci√≥n correspondiente seg√∫n la opci√≥n
        # Nota c√≥mo ahora el c√≥digo es mucho m√°s limpio
        # if opcion == "1":
        #     resultado = sumar(num1, num2)
        #     simbolo = "+"
        # elif opcion == "2":
        #     resultado = restar(num1, num2)
        #     simbolo = "-"
        # elif opcion == "3":
        #     resultado = multiplicar(num1, num2)
        #     simbolo = "*"
        # elif opcion == "4":
        #     resultado = dividir(num1, num2)
        #     simbolo = "/"
        
        # TODO 4.8: Muestra el resultado
        # print(f"‚úÖ {num1} {simbolo} {num2} = {resultado:.2f}")
    
    pass


# TODO 5: Punto de entrada del programa
# Este patr√≥n permite que el archivo sea importable sin ejecutarse autom√°ticamente
# if __name__ == "__main__":
#     main()


# ¬°Excelente! Has refactorizado tu calculadora con funciones.
# 
# Ventajas de esta versi√≥n:
# ‚úÖ Cada funci√≥n tiene una responsabilidad clara
# ‚úÖ El c√≥digo es reutilizable (puedes importar estas funciones en otros archivos)
# ‚úÖ Es m√°s f√°cil de leer y entender
# ‚úÖ Es m√°s f√°cil de probar (puedes testear cada funci√≥n individualmente)
# ‚úÖ Es m√°s f√°cil de mantener y extender
#
# Prueba que funcione igual que la v3, pero nota c√≥mo el c√≥digo es m√°s claro.
#
# üí° En la v5 a√±adir√°s un historial de operaciones usando listas y diccionarios
