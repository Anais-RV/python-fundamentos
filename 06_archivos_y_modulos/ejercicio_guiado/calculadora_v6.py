"""
Calculadora v6 - Persistencia con JSON (VERSI√ìN FINAL)
=======================================================

En esta sexta y √∫ltima versi√≥n a√±adir√°s persistencia: el historial se guardar√°
en un archivo JSON para que no se pierda al cerrar el programa.

Conceptos aplicados:
- Lectura y escritura de archivos
- M√≥dulo json (load, dump)
- Manejo de excepciones (FileNotFoundError, JSONDecodeError)
- Context managers (with open...)
- Persistencia de datos

Instrucciones:
1. Importa el m√≥dulo json
2. Crea funciones para cargar y guardar el historial en JSON
3. Carga el historial al iniciar el programa
4. Guarda el historial al salir
5. A√±ade opci√≥n para limpiar el historial
"""

# TODO 1: Importa el m√≥dulo json
# import json
import os  # Ya est√° importado para verificar si existe el archivo


# Nombre del archivo donde se guardar√° el historial
ARCHIVO_HISTORIAL = "historial_calculadora.json"

# Lista global para el historial
historial = []


# ===== FUNCIONES DE OPERACIONES =====

def sumar(a, b):
    """Suma dos n√∫meros."""
    return a + b


def restar(a, b):
    """Resta dos n√∫meros."""
    return a - b


def multiplicar(a, b):
    """Multiplica dos n√∫meros."""
    return a * b


def dividir(a, b):
    """Divide dos n√∫meros."""
    return a / b


# ===== FUNCIONES DE INTERFAZ =====

def mostrar_menu():
    """Muestra el men√∫ de opciones de la calculadora."""
    print("\n=== CALCULADORA ===")
    print("1. Sumar")
    print("2. Restar")
    print("3. Multiplicar")
    print("4. Dividir")
    print("5. Ver historial")
    print("6. Limpiar historial")  # Nueva opci√≥n
    print("7. Salir")  # Ahora es la opci√≥n 7


def obtener_numeros():
    """Pide dos n√∫meros al usuario y los devuelve."""
    num1 = float(input("Primer n√∫mero: "))
    num2 = float(input("Segundo n√∫mero: "))
    return num1, num2


# ===== FUNCIONES DE HISTORIAL (memoria) =====

def guardar_operacion(num1, num2, operacion, resultado):
    """Guarda una operaci√≥n en el historial (en memoria)."""
    operacion_dict = {
        "num1": num1,
        "num2": num2,
        "operacion": operacion,
        "resultado": resultado
    }
    historial.append(operacion_dict)


def mostrar_historial():
    """Muestra todas las operaciones del historial."""
    if not historial:
        print("üì≠ No hay operaciones en el historial")
        return
    
    print("\nüìú HISTORIAL DE OPERACIONES:")
    for i, op in enumerate(historial, 1):
        print(f"{i}. {op['num1']} {op['operacion']} {op['num2']} = {op['resultado']:.2f}")


# ===== NUEVAS FUNCIONES DE PERSISTENCIA (archivos JSON) =====

def cargar_historial():
    """Carga el historial desde el archivo JSON.
    
    Returns:
        Lista con el historial cargado, o lista vac√≠a si no existe el archivo.
    """
    # TODO 2: Intenta cargar el archivo JSON
    # try:
    #     with open(ARCHIVO_HISTORIAL, "r", encoding="utf-8") as archivo:
    #         datos = json.load(archivo)
    #         print(f"‚úÖ Historial cargado: {len(datos)} operaciones")
    #         return datos
    # except FileNotFoundError:
    #     # El archivo no existe (primera vez que se ejecuta)
    #     print("üìù No hay historial previo, iniciando uno nuevo")
    #     return []
    # except json.JSONDecodeError:
    #     # El archivo existe pero est√° corrupto
    #     print("‚ö†Ô∏è  Archivo de historial corrupto, iniciando uno nuevo")
    #     return []
    
    pass
    return []  # Borra esto cuando implementes la funci√≥n


def guardar_historial_archivo():
    """Guarda el historial actual en el archivo JSON."""
    # TODO 3: Guarda el historial en el archivo JSON
    # try:
    #     with open(ARCHIVO_HISTORIAL, "w", encoding="utf-8") as archivo:
    #         # indent=2 hace que el JSON sea m√°s legible
    #         # ensure_ascii=False permite emojis y caracteres especiales
    #         json.dump(historial, archivo, indent=2, ensure_ascii=False)
    #     print("‚úÖ Historial guardado correctamente")
    # except Exception as e:
    #     print(f"‚ùå Error al guardar el historial: {e}")
    
    pass


def limpiar_historial():
    """Limpia el historial en memoria y elimina el archivo."""
    global historial
    
    # TODO 4: Limpia el historial
    # Pide confirmaci√≥n al usuario
    # confirmacion = input("‚ö†Ô∏è  ¬øEst√°s seguro de que quieres limpiar el historial? (s/n): ")
    # if confirmacion.lower() != "s":
    #     print("‚ùå Operaci√≥n cancelada")
    #     return
    
    # Vac√≠a la lista en memoria
    # historial = []
    
    # Elimina el archivo si existe
    # try:
    #     if os.path.exists(ARCHIVO_HISTORIAL):
    #         os.remove(ARCHIVO_HISTORIAL)
    #     print("üóëÔ∏è  Historial limpiado correctamente")
    # except Exception as e:
    #     print(f"‚ùå Error al eliminar el archivo: {e}")
    
    pass


# ===== FUNCI√ìN PRINCIPAL =====

def main():
    """Funci√≥n principal de la calculadora."""
    
    # TODO 5: Carga el historial al iniciar
    # global historial
    # print("üîÑ Cargando historial...")
    # historial = cargar_historial()
    
    # while True:
        # mostrar_menu()
        # opcion = input("\nElige una opci√≥n: ")
        
        # TODO 6: Actualiza la condici√≥n de salir (ahora es opci√≥n 7)
        # if opcion == "7":
        #     print("üíæ Guardando historial...")
        #     guardar_historial_archivo()
        #     print("¬°Hasta pronto! üëã")
        #     break
        
        # TODO 7: A√±ade la opci√≥n 5 (ver historial)
        # if opcion == "5":
        #     mostrar_historial()
        #     continue
        
        # TODO 8: A√±ade la opci√≥n 6 (limpiar historial)
        # if opcion == "6":
        #     limpiar_historial()
        #     continue
        
        # TODO 9: Actualiza la validaci√≥n de opciones (ahora son 1-6)
        # if opcion not in ["1", "2", "3", "4", "5", "6"]:
        #     print("‚ùå Opci√≥n no v√°lida")
        #     continue
        
        # num1, num2 = obtener_numeros()
        
        # if opcion == "4" and num2 == 0:
        #     print("‚ùå No se puede dividir por cero")
        #     continue
        
        # if opcion == "1":
        #     resultado = sumar(num1, num2)
        #     simbolo = "+"
        # elif opcion == "2":
        #     resultado = restar(num1, num2)
        #     simbolo = "-"
        # elif opcion == "3":
        #     resultado = multiplicar(num1, num2)
        #     simbolo = "*"
        # elif opcion == "4":
        #     resultado = dividir(num1, num2)
        #     simbolo = "/"
        
        # print(f"‚úÖ {num1} {simbolo} {num2} = {resultado:.2f}")
        # guardar_operacion(num1, num2, simbolo, resultado)
    
    pass


if __name__ == "__main__":
    main()


# ¬°FELICIDADES! Has completado toda la serie "La Calculadora que Crece"
# 
# üéâ Lo que has logrado:
# ‚úÖ v1: Suma b√°sica (input, print, variables)
# ‚úÖ v2: 4 operaciones (operadores, if/elif, f-strings)
# ‚úÖ v3: Men√∫ interactivo (while, break/continue, validaci√≥n)
# ‚úÖ v4: C√≥digo modular (funciones, docstrings, return)
# ‚úÖ v5: Historial en memoria (listas, diccionarios, append)
# ‚úÖ v6: Persistencia con JSON (archivos, json.load/dump, excepciones)
#
# Pruebas finales:
# 1. Ejecuta el programa y realiza varias operaciones
# 2. Sal del programa (opci√≥n 7)
# 3. Verifica que se cre√≥ el archivo "historial_calculadora.json"
# 4. √Åbrelo con un editor de texto y ver√°s el JSON con tus operaciones
# 5. Vuelve a ejecutar el programa ‚Üí el historial debe cargarse autom√°ticamente
# 6. Prueba "Limpiar historial" ‚Üí el archivo debe desaparecer
#
# üí° Extensiones opcionales si quieres seguir aprendiendo:
# - A√±adir m√°s operaciones (potencia, ra√≠z cuadrada, m√≥dulo)
# - Exportar historial a CSV para Excel
# - Interfaz gr√°fica con Tkinter
# - Tests unitarios con pytest
# - Separar en m√∫ltiples m√≥dulos (ver carpeta calculadora_modular/)
#
# ¬°Has terminado un proyecto completo desde cero hasta una aplicaci√≥n funcional!
# Este es el tipo de evoluci√≥n que ver√°s en proyectos reales.
